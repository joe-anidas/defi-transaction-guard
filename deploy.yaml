---
version: "2.0"

services:
  defi-guard-ai:
    image: python:3.9-slim
    expose:
      - port: 8080
        as: 80
        to:
          - global: true
    env:
      - GROK_API=gsk_your_key_here
      - GEMINI_API=your_gemini_key_here
      - PYTHONUNBUFFERED=1
    command:
      - "sh"
      - "-c"
    args:
      - |
        pip install flask requests openai google-generativeai groq
        cat > ai_service.py << 'EOF'
        from flask import Flask, request, jsonify
        import os
        import requests
        import json
        import time
        from groq import Groq
        import google.generativeai as genai
        
        app = Flask(__name__)
        
        # Initialize AI clients
        grok_client = None
        gemini_model = None
        
        if os.getenv('GROK_API'):
            grok_client = Groq(api_key=os.getenv('GROK_API'))
            
        if os.getenv('GEMINI_API'):
            genai.configure(api_key=os.getenv('GEMINI_API'))
            gemini_model = genai.GenerativeModel('gemini-pro')
        
        @app.route('/health')
        def health():
            return jsonify({
                "status": "healthy", 
                "provider": "akash-gpu",
                "grok_available": grok_client is not None,
                "gemini_available": gemini_model is not None
            })
        
        @app.route('/analyze', methods=['POST'])
        def analyze_transaction():
            data = request.json
            start_time = time.time()
            
            try:
                result = analyze_with_ai(data)
                result['processTime'] = int((time.time() - start_time) * 1000)
                return jsonify(result)
            except Exception as e:
                return jsonify({
                    "error": str(e),
                    "riskScore": 50,
                    "provider": "akash-fallback",
                    "threatType": "Analysis Failed"
                }), 500
        
        def analyze_with_ai(tx_data):
            prompt = build_analysis_prompt(tx_data)
            
            # Try Grok first
            if grok_client:
                try:
                    response = grok_client.chat.completions.create(
                        model="mixtral-8x7b-32768",
                        messages=[
                            {"role": "system", "content": "You are a DeFi security expert. Respond only with valid JSON."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        max_tokens=1000
                    )
                    
                    result = json.loads(response.choices[0].message.content)
                    result['provider'] = 'grok-akash'
                    return result
                except Exception as e:
                    print(f"Grok failed: {e}")
            
            # Try Gemini as fallback
            if gemini_model:
                try:
                    response = gemini_model.generate_content(prompt)
                    # Extract JSON from response
                    text = response.text
                    start = text.find('{')
                    end = text.rfind('}') + 1
                    if start != -1 and end != 0:
                        result = json.loads(text[start:end])
                        result['provider'] = 'gemini-akash'
                        return result
                except Exception as e:
                    print(f"Gemini failed: {e}")
            
            # Fallback heuristic
            return {
                "riskScore": 45,
                "threatType": "Heuristic Analysis",
                "confidence": 0.7,
                "reasoning": "AI services unavailable, using fallback analysis",
                "provider": "akash-heuristic",
                "indicators": ["fallback-analysis"]
            }
        
        def build_analysis_prompt(tx_data):
            return f"""Analyze this DeFi transaction for security risks:
        
        Hash: {tx_data.get('hash', 'N/A')}
        From: {tx_data.get('from', 'N/A')}
        To: {tx_data.get('to', 'N/A')}
        Value: {tx_data.get('value', 'N/A')}
        Gas: {tx_data.get('gasLimit', 'N/A')}
        Data: {tx_data.get('data', 'N/A')}
        
        Check for: flash loans, rug pulls, MEV attacks, governance exploits.
        
        Respond with JSON:
        {{
          "riskScore": <0-100>,
          "threatType": "<threat or Normal Transaction>",
          "confidence": <0.0-1.0>,
          "reasoning": "<explanation>",
          "indicators": ["<risk factors>"]
        }}"""
        
        if __name__ == '__main__':
            print("ðŸš€ DeFi AI Service starting on Akash...")
            print(f"Grok available: {grok_client is not None}")
            print(f"Gemini available: {gemini_model is not None}")
            app.run(host='0.0.0.0', port=8080)
        EOF
        python ai_service.py

  defi-guard-frontend:
    image: node:18-alpine
    expose:
      - port: 3000
        as: 80
        to:
          - global: true
    command:
      - "sh"
      - "-c"
    args:
      - |
        npm install -g serve
        echo '{"name":"defi-guard","version":"1.0.0"}' > package.json
        mkdir -p build
        echo '<h1>DeFi Transaction Guard - Deployed on Akash!</h1>' > build/index.html
        serve -s build -l 3000

profiles:
  compute:
    defi-guard-ai:
      resources:
        cpu:
          units: 1.0
        memory:
          size: 1Gi
        storage:
          size: 2Gi
        gpu:
          units: 1
          attributes:
            vendor:
              nvidia:
                - model: rtx4090
    defi-guard-frontend:
      resources:
        cpu:
          units: 0.5
        memory:
          size: 512Mi
        storage:
          size: 1Gi

  placement:
    akash:
      attributes:
        host: akash
      signedBy:
        anyOf:
          - "akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63"
      pricing:
        defi-guard-ai:
          denom: uakt
          amount: 1000
        defi-guard-frontend:
          denom: uakt
          amount: 500

deployment:
  defi-guard-ai:
    akash:
      profile: defi-guard-ai
      count: 1
  defi-guard-frontend:
    akash:
      profile: defi-guard-frontend
      count: 1